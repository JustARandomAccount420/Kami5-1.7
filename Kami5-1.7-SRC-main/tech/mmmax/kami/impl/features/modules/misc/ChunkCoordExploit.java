/*
 * Decompiled with CFR 0.151.
 * 
 * Could not load the following classes:
 *  net.minecraft.entity.Entity
 *  net.minecraft.entity.item.EntityBoat
 *  net.minecraft.init.Items
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketConfirmTeleport
 *  net.minecraft.network.play.client.CPacketPlayer$Position
 *  net.minecraft.network.play.client.CPacketPlayerTryUseItem
 *  net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock
 *  net.minecraft.network.play.client.CPacketSteerBoat
 *  net.minecraft.network.play.server.SPacketEntityTeleport
 *  net.minecraft.network.play.server.SPacketEntityVelocity
 *  net.minecraft.network.play.server.SPacketMaps
 *  net.minecraft.util.EnumFacing
 *  net.minecraft.util.EnumHand
 *  net.minecraft.world.storage.MapData
 *  net.minecraftforge.fml.common.eventhandler.SubscribeEvent
 *  net.minecraftforge.fml.common.gameevent.TickEvent$ClientTickEvent
 */
package tech.mmmax.kami.impl.features.modules.misc;

import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.init.Items;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketSteerBoat;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketMaps;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.world.storage.MapData;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.TickEvent;
import tech.mmmax.kami.api.event.PacketEvent;
import tech.mmmax.kami.api.feature.Feature;
import tech.mmmax.kami.api.feature.module.Module;
import tech.mmmax.kami.api.utils.NullUtils;
import tech.mmmax.kami.api.utils.chat.ChatMessage;
import tech.mmmax.kami.api.utils.chat.ChatUtils;
import tech.mmmax.kami.api.value.Value;
import tech.mmmax.kami.api.value.builder.ValueBuilder;
import tech.mmmax.kami.mixin.mixins.access.IEntity;

public class ChunkCoordExploit
extends Module {
    Value<String> mode = new ValueBuilder().withDescriptor("Mode").withValue("Leaked").withModes("Leaked", "Test").register(this);
    Value<Number> packetsPerTick = new ValueBuilder().withDescriptor("Packet Count").withValue(2).withRange(0, 10).register(this);

    public ChunkCoordExploit() {
        super("CoordExploit", Feature.Category.Misc);
    }

    @SubscribeEvent
    public void onClientTick(TickEvent.ClientTickEvent event) {
        if (NullUtils.nullCheck()) {
            return;
        }
        if (this.mode.getValue().equals("Leaked")) {
            if (((IEntity)ChunkCoordExploit.mc.player).isInPortal() && ChunkCoordExploit.mc.player.getRidingEntity() instanceof EntityBoat) {
                if (ChunkCoordExploit.mc.player.inventory.getCurrentItem().getItem().equals(Items.MAP)) {
                    ChunkCoordExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayerTryUseItemOnBlock(ChunkCoordExploit.mc.player.getPosition(), EnumFacing.UP, EnumHand.MAIN_HAND, 0.0f, -1337.77f, 0.0f));
                }
                for (int i = 0; i < this.packetsPerTick.getValue().intValue(); ++i) {
                    ChunkCoordExploit.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(ChunkCoordExploit.mc.player.posX, -1337.77, ChunkCoordExploit.mc.player.posZ, false));
                    ChunkCoordExploit.mc.player.connection.sendPacket((Packet)new CPacketSteerBoat(false, true));
                }
            }
            for (Entity entity : ChunkCoordExploit.mc.world.playerEntities) {
                if (entity.getName().equalsIgnoreCase(ChunkCoordExploit.mc.player.getName())) continue;
                ChatUtils.sendMessage(new ChatMessage("Found a player at: " + entity.getPosition(), false, 0));
            }
        }
    }

    @SubscribeEvent
    public void onPacket(PacketEvent event) {
        if (event.getPacket() instanceof CPacketConfirmTeleport || event.getPacket() instanceof CPacketPlayerTryUseItem) {
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof SPacketMaps) {
            ((SPacketMaps)event.getPacket()).setMapdataTo(new MapData("haha i get ur coords"));
        }
        if (event.getPacket() instanceof SPacketEntityVelocity || event.getPacket() instanceof SPacketEntityTeleport) {
            event.setCanceled(true);
        }
    }
}

